measureSt<-measureState[order(measureState[,outcomeColumn],measureState[,2]),]
##measureSt<-measureState[order(measureState[,2]),]
measureSt[,2]
measureSt[1,2]
hospital<-measureSt[1,2]
hospital
measureSt<-measureState[order(measureState[,outcomeColumn],measureState[,2])]
measureSt<-measureState[order(,measureState[,outcomeColumn],measureState[,2])]
measureSt<-measureState[order(,measureState[,outcomeColumn],measureState[,2]),]
measureState<-subset(measureAll,State==state)
measureSt<-measureState[order(,measureState[,outcomeColumn],measureState[,2]),]
measureSt<-measureState[order(measureState[,outcomeColumn],measureState[,2]),]
##measureSt<-measureState[order(measureState[,2]),]
hospital<-measureSt[1,2]
hospital
hospital[1]
hospital[1,1]
class(hospital)
class(measureSt)
measureAll<-read.csv("outcome-of-care-measures.csv")
##Read outcome data
##Check that state and outcome are valid
state<-"OR"
outcome<-"heart attack"
outcomeColumn<-0
##stateVector<-measureAll[,"State"]
if(sum(complete.cases(match(measureAll[,"State"],state)))==0)
{
stop("invalid state")
}
if(outcome=="heart attack")
{
outcomeColumn<-11
}else if(outcome=="heart failure")
{
}else if(outcome=="pneumonia")
{
}else
{
stop("invalid outcome")
}
## Return hospital name in that state with lowest 30-day death
## rate
measureState<-subset(measureAll,State==state)
measureOrder<-measureState[order(measureState[,outcomeColumn],measureState[,2]),]
##measureSt<-measureState[order(measureState[,2]),]
class(measureOrder)
hospital<-subset(measureOrder)
hospital
hospital<-as.character(measureOrder[1,2])
hospital
submit()
setwd("D:/RWD/assignment3")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
2
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
source(best.R)
submit()
submit()
source("best.R")
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
best("BB", "heart attack")
best("NY", "hert attack")
best("TX", "heart failure")
measureAll<-read.csv("outcome-of-care-measures.csv")
##Read outcome data
##Check that state and outcome are valid
state<-"TX"
outcome<-"heart failure"
outcomeColumn<-0
##stateVector<-measureAll[,"State"]
if(sum(complete.cases(match(measureAll[,"State"],state)))==0)
{
stop("invalid state")
}
if(outcome=="heart attack")
{
outcomeColumn<-11
}else if(outcome=="heart failure")
{
outcomeColumn<-17
}else if(outcome=="pneumonia")
{
outcomeColumn<-23
}else
{
stop("invalid outcome")
}
## Return hospital name in that state with lowest 30-day death
## rate
outcomeColumn
measureState<-subset(measureAll,State==state)
measureOrder<-measureState[order(measureState[,outcomeColumn],measureState[,2]),]
measureOrder[,c(2,17)]
measureOrder<-measureState[order(as.numeric(measureState[,outcomeColumn]),measureState[,2]),]
measureOrder[,c(2,17)]
measureState[,17]<-as.numeric(measureState[,17])
measureOrder<-measureState[order(as.numeric(measureState[,outcomeColumn]),measureState[,2]),]
measureOrder[,c(2,17)]
measureState<-subset(measureAll,State==state)
measureState[,17]<-as.double(measureState[,17])
measureOrder<-measureState[order(measureState[,outcomeColumn],measureState[,2]),]
measureOrder[,c(2,17)]
measureAll<-read.csv("outcome-of-care-measures.csv")
##Read outcome data
##Check that state and outcome are valid
state<-"TX"
outcome<-"heart failure"
outcomeColumn<-0
##stateVector<-measureAll[,"State"]
if(sum(complete.cases(match(measureAll[,"State"],state)))==0)
{
stop("invalid state")
}
if(outcome=="heart attack")
{
outcomeColumn<-11
}else if(outcome=="heart failure")
{
outcomeColumn<-17
}else if(outcome=="pneumonia")
{
outcomeColumn<-23
}else
{
stop("invalid outcome")
}
## Return hospital name in that state with lowest 30-day death
## rate
outcomeColumn
measureState<-subset(measureAll,State==state)
measureState[,17]<-as.double(measureState[,17])
measureOrder<-measureState[order(measureState[,outcomeColumn],measureState[,2]),]
measureOrder[,c(2,17)]
hospital<-as.character(measureOrder[1,2])
hospital
a<-c("123.4","chare")
as.double(a)
b<-as.double(a)
b
a<-c("12.34","chare")
b<-as.double(a)
b
measureState[,17]
measureAll<-read.csv("outcome-of-care-measures.csv")
##Read outcome data
##Check that state and outcome are valid
state<-"TX"
outcome<-"heart failure"
outcomeColumn<-0
##stateVector<-measureAll[,"State"]
if(sum(complete.cases(match(measureAll[,"State"],state)))==0)
{
stop("invalid state")
}
if(outcome=="heart attack")
{
outcomeColumn<-11
}else if(outcome=="heart failure")
{
outcomeColumn<-17
}else if(outcome=="pneumonia")
{
outcomeColumn<-23
}else
{
stop("invalid outcome")
}
## Return hospital name in that state with lowest 30-day death
## rate
outcomeColumn
measureState<-subset(measureAll,State==state)
measureState[,17]
b<-measureState[,17]
c<-as.double(b)
c
class(b)
b
c<-as.double(as.character(b))
c
measureState<-subset(measureAll,State==state)
measureOrder<-measureState[order(as.double(as.character(measureState[,outcomeColumn])),measureState[,2]),]
measureOrder[,c(2,17)]
hospital<-as.character(measureOrder[1,2])
hospital
source("best.R")
best("TX", "heart attack")
best("TX", "heart failure")
[1] "FORT DUNCAN MEDICAL CENTER"
measureAll<-read.csv("outcome-of-care-measures.csv")
##Read outcome data
##Check that state and outcome are valid
state<-"TX"
outcome<-"heart failure"
outcomeColumn<-0
##stateVector<-measureAll[,"State"]
if(sum(complete.cases(match(measureAll[,"State"],state)))==0)
{
stop("invalid state")
}
if(outcome=="heart attack")
{
outcomeColumn<-11
}else if(outcome=="heart failure")
{
outcomeColumn<-17
}else if(outcome=="pneumonia")
{
outcomeColumn<-23
}else
{
stop("invalid outcome")
}
## Return hospital name in that state with lowest 30-day death
## rate
measureState<-subset(measureAll,State==state)
measureOrder<-measureState[order(as.double(as.character(measureState[,outcomeColumn])),measureState[,2]),]
hospital<-as.character(measureOrder[1,2])
hospital
source("best.R")
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
best("BB", "heart attack")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
source(best.R)
submit()
submit()
> source("rankhospital.R")
source("rankhospital.R")
source("rankhospital.R")
source("rankhospital.R")
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
source("rankhospital.R")
rankhospital("MD", "heart attack", "worst")
measureAll<-read.csv("outcome-of-care-measures.csv")
state<-"MD"
outcome<-"heart failure"
num<-"worst"
outcomeColumn<-0
if(sum(complete.cases(match(measureAll[,"State"],state)))==0)
{
stop("invalid state")
}
if(outcome=="heart attack")
{
outcomeColumn<-11
}else if(outcome=="heart failure")
{
outcomeColumn<-17
}else if(outcome=="pneumonia")
{
outcomeColumn<-23
}else
{
stop("invalid outcome")
}
measureState<-subset(measureAll,State==state)
if(num=="best"){
num=1
}else if(num=="worst"){
num=nrow(measureState)
}
measureOrder<-measureState[order(as.double(as.character(measureState[,outcomeColumn])),measureState[,2]),]
hospital<-as.character(measureOrder[num,2])
hospital
num
measureOrder<-measureState[order(as.double(as.character(measureState[,outcomeColumn])),measureState[,2]),]
measureOrder[,2]
measureOrder[,c(2,17)]
hospital<-as.character(measureOrder[num,2])
hospital
measureAll<-read.csv("outcome-of-care-measures.csv")
state<-"MD"
outcome<-"heart attack"
num<-"worst"
outcomeColumn<-0
if(sum(complete.cases(match(measureAll[,"State"],state)))==0)
{
stop("invalid state")
}
if(outcome=="heart attack")
{
outcomeColumn<-11
}else if(outcome=="heart failure")
{
outcomeColumn<-17
}else if(outcome=="pneumonia")
{
outcomeColumn<-23
}else
{
stop("invalid outcome")
}
measureState<-subset(measureAll,State==state)
if(num=="best"){
num=1
}else if(num=="worst"){
num=nrow(measureState)
}
num
measureOrder<-measureState[order(as.double(as.character(measureState[,outcomeColumn])),measureState[,2]),]
measureOrder[,c(2,17)]
hospital<-as.character(measureOrder[num,2])
hospital
num
outcomeColumn
measureOrder<-measureState[order(as.double(as.character(measureState[,outcomeColumn])),measureState[,2]),]
measureOrder[,c(2,11)]
sum(complete.cases(as.double(as.character(measureState[,outcomeColumn]))))
measureAll<-read.csv("outcome-of-care-measures.csv")
state<-"MD"
outcome<-"heart attack"
num<-"worst"
outcomeColumn<-0
if(sum(complete.cases(match(measureAll[,"State"],state)))==0)
{
stop("invalid state")
}
if(outcome=="heart attack")
{
outcomeColumn<-11
}else if(outcome=="heart failure")
{
outcomeColumn<-17
}else if(outcome=="pneumonia")
{
outcomeColumn<-23
}else
{
stop("invalid outcome")
}
measureState<-subset(measureAll,State==state)
if(num=="best"){
num=1
}else if(num=="worst"){
num=sum(complete.cases(as.double(as.character(measureState[,outcomeColumn]))))
}
outcomeColumn
num
measureOrder<-measureState[order(as.double(as.character(measureState[,outcomeColumn])),measureState[,2]),]
measureOrder[,c(2,11)]
hospital<-as.character(measureOrder[num,2])
hospital
source("rankhospital.R")
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
source(best.R)
submit()
submit()
submit()
submit()
submit()
source(rankhospital.R)
setwd("D:/RWD")
setwd("D:/RWD/assignment3")
source(rankhospital.R)
source("rankhospital.R")
table[measureAll[,"State"]]
table(measureAll[,"State"])
stateVector<-table(measureAll[,"State"])[,1]
stateVector<-as.data.frame(table(measureAll[,"State"]))[,1]
stateVector
class(stateVector)
source("rankhospital.R")
measureAll<-read.csv("outcome-of-care-measures.csv")
stateVectorFactor<-as.data.frame(table(measureAll[,"State"]))[,1]
stateVector<-as.character(stateVectorFactor)
stateVector
stateVector
stateVector<-stateVector(order(1))
source("rankhospital.R")
measureAll<-read.csv("outcome-of-care-measures.csv")
stateVectorFactor<-as.data.frame(table(measureAll[,"State"]))[,1]
stateVector<-as.character(stateVectorFactor)
stateVector<-stateVector(order(1))
stateVector<-stateVector[order(1)]
stateVector
stateVector<-stateVector[order(1),]
stateVector
stateVector<-stateVector[order(stateVector[1]),]
stateVector<-stateVector[order(stateVector[1,]),]
stateVector<-stateVector[order(stateVector),]
stateVector<-stateVector[order(stateVector)]
stateVector
stateVector<-stateVector[order(stateVector,)]
stateVector<-sort(stateVector)
stateVector
source("rankhospital.R")
measureAll<-read.csv("outcome-of-care-measures.csv")
stateVectorFactor<-as.data.frame(table(measureAll[,"State"]))[,1]
stateVector<-as.character(stateVectorFactor)
stateVector<-sort(stateVector)
stateVector
lapply(stateVector,print)
stateWithNum<-as.data.frame(table(measureAll[,"State"]))
stateWithNum
stateWithNum<-data.frame("State","count","hospital")
stateWithNum<-as.data.frame(table(measureAll[,"State"]),)
stateWithNum
stateWithNum<-data.frame("State","count","hospital")
statewithNum
stateWithNum
stateVector<-as.character(stateWithNum[,1])
stateVector<-sort(stateVector)
stateVector
stateWithNum<-as.data.frame(table(measureAll[,"State"]),)
class(stateWithNum[2])
class(stateWithNum[[,2]])
class(stateWithNum[[1,2]])
stateWithNum<-stateWithNum[order(stateWithNum[,1])]
stateWithNum<-stateWithNum[order(stateWithNum[,1]),]
stateWithNum
stateWithNum<-as.data.frame(table(measureAll[,"State"]),)
View(stateWithNum)
measureAll<-read.csv("outcome-of-care-measures.csv")
stateWithNum<-as.data.frame(table(measureAll[,"State"]),)
stateWithNum<-stateWithNum[order(stateWithNum[,1]),]
measureAll<-read.csv("outcome-of-care-measures.csv")
stateWithNum<-as.data.frame(table(measureAll[,"State"]),)
View(stateWithNum)
stateWithNum<-stateWithNum[order(stateWithNum[,1]),]
lapply(stateWithNum[,1],print)
i<-rown(stateWithNum)
i<-nrow(stateWithNum)
i
measureState<-subset(measureAll,State==stateWithNum[i,1])
measureState
nrow(measureState)
measureAll<-read.csv("outcome-of-care-measures.csv")
##stateWithNum<-as.data.frame(table(measureAll[,"State"]),)
##stateWithNum<-stateWithNum[order(stateWithNum[,1]),]
##stateWithNum
##class(stateWithNum[[1,2]])
stateVectorFactor<-as.data.frame(table(measureAll[,"State"]))[,1]
stateVector<-as.character(stateVectorFactor)
stateVector<-sort(stateVector)
measureState<-subset(measureAll,State==stateVector[1])
nrow(measureState)
measureAll<-read.csv("outcome-of-care-measures.csv")
##stateWithNum<-as.data.frame(table(measureAll[,"State"]),)
##stateWithNum<-stateWithNum[order(stateWithNum[,1]),]
##stateWithNum
##class(stateWithNum[[1,2]])
stateVectorFactor<-as.data.frame(table(measureAll[,"State"]))[,1]
stateVector<-as.character(stateVectorFactor)
stateVector<-sort(stateVector)
##stateVector
outcome<-"heart attack"
outcomeColumn<-0
if(outcome=="heart attack")
{
outcomeColumn<-11
}else if(outcome=="heart failure")
{
outcomeColumn<-17
}else if(outcome=="pneumonia")
{
outcomeColumn<-23
}else
{
stop("invalid outcome")
}
i<-1
hospitalVector<-NULL
measureState<-subset(measureAll,State==stateVector[i])
if(num=="best"){
num=1
}else if(num=="worst"){
num=sum(complete.cases(as.double(as.character(measureState[,outcomeColumn]))))
}
measureOrder<-measureState[order(as.double(as.character(measureState[,outcomeColumn])),measureState[,2]),]
hospital<-as.character(measureOrder[num,2])
hospital
num="best"
measureState<-subset(measureAll,State==stateVector[i])
if(num=="best"){
num=1
}else if(num=="worst"){
num=sum(complete.cases(as.double(as.character(measureState[,outcomeColumn]))))
}
measureOrder<-measureState[order(as.double(as.character(measureState[,outcomeColumn])),measureState[,2]),]
hospital<-as.character(measureOrder[num,2])
hospital
num="worst"
measureState<-subset(measureAll,State==stateVector[i])
if(num=="best"){
num=1
}else if(num=="worst"){
num=sum(complete.cases(as.double(as.character(measureState[,outcomeColumn]))))
}
measureOrder<-measureState[order(as.double(as.character(measureState[,outcomeColumn])),measureState[,2]),]
hospital<-as.character(measureOrder[num,2])
hospital
num=10
measureState<-subset(measureAll,State==stateVector[i])
if(num=="best"){
num=1
}else if(num=="worst"){
num=sum(complete.cases(as.double(as.character(measureState[,outcomeColumn]))))
}
measureOrder<-measureState[order(as.double(as.character(measureState[,outcomeColumn])),measureState[,2]),]
hospital<-as.character(measureOrder[num,2])
hospital
